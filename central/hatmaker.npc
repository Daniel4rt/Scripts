//      ______  __    __                                 
//     /\  _  \/\ \__/\ \           www.danielart.net
//     \ \ \_\ \ \ ,_\ \ \___      __    ___      __     
// _____\ \  __ \ \ \/\ \  _ `\  /'__`\/' _ `\  /'__`\   
///\  __\\ \ \/\ \ \ \_\ \ \ \ \/\  __//\ \/\ \/\ \_\.\_ 
//\ \_\_/ \ \_\ \_\ \__\\ \_\ \_\ \____\ \_\ \_\ \__/.\_\
// \/_/    \/_/\/_/\/__/ \/_/\/_/\/____/\/_/\/_/\/__/\/_/
//
//========================================================
// ---             Máquina Creadora de Hats            ---
//========================================================
// ---                   by DanielArt                  ---
//========================================================

-	shop	HAT_MAKER_SHOP	-1,501:-1

prontera,150,180,4	script	Máquina Creadora de Hat::HAT_MAKER	564,{
	mes "[^5533ffMáquina de Hats^000000]";
	mes "La máquina muestra un mensaje:";
	mes "^777777Por favor selecciona el gorro que desees fabricar,";
	mes "compra ^ff0000solo uno^777777 y te mostrará qué materiales necesitas.^000000";
	close2;
	npcshopattach "HAT_MAKER_SHOP",1;
	if(getarraysize(@bought_nameid) > 0)
		deletearray @bought_nameid[0],getarraysize(@bought_nameid);
	callshop "HAT_MAKER_SHOP",1;
	end;

OnBuyItem:
	if(getarraysize(@bought_nameid) > 1) {
		dispbottom " * Solo debes de elegir un gorro por ocasión, no puedo mostrar los materiales requeridos para más de uno.",0x000000;
		end;
	}
	for(.@a = 0; .@a < getarraysize(.hat); .@a++)
		if(@bought_nameid == .hat[.@a])
			.@i = .@a;
	mes "[^5533ffMáquina de Hats^000000]";
	mes "^777777Procesando fabricación de...^000000";
	mes " ","<ITEM>"+getitemname(.hat[.@i])+((getitemslots(.hat[.@i]) > 0) ? " ["+getitemslots(.hat[.@i])+"]" : "")+"<INFO>"+.hat[.@i]+"</INFO></ITEM>";
	next;
	mes "[^5533ffMáquina de Hats^000000]";
	mes "^777777Materiales requeridos:^000000";

// Nota:
// - Es importante no hacer todo en un solo bucle.

// Muestra los materiales
	for(.@g = 1; .@g < 5; .@g++) {
		mes getd(".m"+.@g+"c["+.@i+"]")+"x <ITEM>"+getitemname(getd(".m"+.@g+"["+.@i+"]"))+((getitemslots(getd(".m"+.@g+"["+.@i+"]")) > 0) ? " ["+getitemslots(getd(".m"+.@g+"["+.@i+"]"))+"]" : "")+"<INFO>"+getd(".m"+.@g+"["+.@i+"]")+"</INFO></ITEM>";
	}
	mes "^ff8800Zeny^000000: "+callfunc("F_InsertComma",.zeny[.@i])+"z.";
	next;
	if(select("Fabricar ^cc6600"+getitemname(.hat[.@i])+"^000000:^777777Salir^000000") == 2) {
		mes "[^5533ffMáquina de Hats^000000]";
		mes "^777777Apagando sistema...^000000";
		close;
	}

// Comprueba que el usuario tenga todos los materiales.
	for(.@g = 1; .@g < 5; .@g++) {
		if(countitem(getd(".m"+.@g+"["+.@i+"]")) < getd(".m"+.@g+"c["+.@i+"]") || Zeny < .zeny[.@i]) {
			mes "[^5533ffMáquina de Hats^000000]";
			mes "^777777Recursos insuficientes para la fabricación...^000000";
			next;
			mes "[^5533ffMáquina de Hats^000000]";
			mes "^777777Apagando sistema...^000000";
			close;
		}
	}
	if(Q_SUC_HAT > 15)
		Q_SUC_HAT = 15;
	mes "[^5533ffMáquina de Hats^000000]";
	mes "^777777Probabilidad de Fabricación:^000000 "+(85+Q_SUC_HAT)+"%";
	next;
	if(select("Continuar:^777777Salir^000000") == 2) {
		mes "[^5533ffMáquina de Hats^000000]";
		mes "^777777Apagando sistema...^000000";
		close;
	}
	mes "[^5533ffMáquina de Hats^000000]";
	mes "¿^ff0000Segur"+(Sex?"o":"a")+"^000000 que deseas continuar?";
	mes "Si la fabricación falla perderás todos tus materiales y Zeny.";
	next;
	if(select("Continuar:^777777Salir^000000") == 2) {
		mes "[^5533ffMáquina de Hats^000000]";
		mes "^777777Apagando sistema...^000000";
		close;
	}

	Zeny -= .zeny[.@i];

// Fabrica el hat y último mensaje.
	if(rand(100) < (85 + Q_SUC_HAT)) {
// Elimina todos los objetos.
		for(.@g = 1; .@g < 5; .@g++)
			delitem getd(".m"+.@g+"["+.@i+"]"),getd(".m"+.@g+"c["+.@i+"]");
		getitem .hat[.@i],1;
		specialeffect2 154;
		Q_SUC_HAT = 0;
		mes "[^5533ffMáquina de Hats^000000]";
		mes "^777777La fabricación fue un éxito.^000000";
		next;
		mes "[^5533ffMáquina de Hats^000000]";
		mes "^777777Apagando sistema...^000000";
		close;
	} else {
		specialeffect2 155;
		Q_SUC_HAT += rand(5,15); // Añade un bonus de éxito en caso de que falle.
		mes "[^5533ffMáquina de Hats^000000]";
		mes "^777777La fabricación ha fallado.^000000";
		next;
		mes "[^5533ffMáquina de Hats^000000]";
		mes "^777777Apagando sistema...^000000";
		close;
	}

OnInit:
	// Elimina el objeto inicial del shop.
	npcshopdelitem "HAT_MAKER_SHOP",501;

	// Añade los hats con sus requisitos a los arrays mediante función.
	// callsub S_Ah,#,HatID,MatID1,Cant1,MatID2,Cant2,MatID3,Cant3,MatID4,Cant4,mZeny;

	callsub S_Ah,0,		5388,	926,70,		954,70,		4037,1,		4117,1,		2; // Snake Head Hat
	callsub S_Ah,1,		5184,	978,10,		5016,1,		4443,1,		2787,1,		2; // Captain Hat
	callsub S_Ah,2,		5359,	975,15,		7106,120,	2284,1,		5184,1,		5; // Ship Captain Hat
	callsub S_Ah,3,		5361,	5096,1,		2265,1,		10019,1,	4410,1,		5; // Gangster Scarf
	callsub S_Ah,4,		5463,	979,65,		965,100,	7562,7,		4412,3,		5; // Rainbow Scarf
	callsub S_Ah,5,		5597,	12210,1,	980,10,		975,10,		4409,1,		5; // Bubble Gum in Mouth
	callsub S_Ah,6,		18611,	2202,1,		4052,1,		746,75,		983,10,		5; // Black Frammed Glasses
	callsub S_Ah,7,		18600,	7109,2,		7063,450,	7562,10,	4035,8,		5; // Cat Ear Beret
	callsub S_Ah,8,		18601,	7063,450,	7451,10,	7566,15,	4058,8,		5; // Red Pom Band
	callsub S_Ah,9,		18670,	2513,1,		1059,276,	7166,276,	8205,10,	5; // Handkerchief in Mouth
	callsub S_Ah,10,	5225,	7063,215,	978,25,		4223,3,		7441,75,	3; // Parade Hat
	callsub S_Ah,11,	18522,	5225,1,		5068,1,		983,45,		4094,2,		5; // Evil Marching Hat
	callsub S_Ah,12,	18856,	982,50,		1030,15,	1029,15,	4216,1,		3; // White Drooping Eddga
	callsub S_Ah,13,	5497,	980,40,		18856,1,	1030,35,	4188,1,		5; // King Tiger Doll Hat
	callsub S_Ah,14,	5902,	7109,1,		8205,8,		587,100,	576,100,	6; // Harvester Hat
	callsub S_Ah,15,	5208,	1006,40,	8204,20,	7036,3,		7015,250,	5; // Rideword Hat
	callsub S_Ah,16,	5903,	1059,200,	2322,1,		2274,3,		8205,3,		6; // Deadman Bandana
	callsub S_Ah,17,	5905,	1060,125,	18110,1,	8208,7,		8205,15,	6; // Lyrica Hat
	callsub S_Ah,18,	5904,	7063,350,	7109,1,		8205,3,		7300,3,		6; // Unsuspicious Hat
	callsub S_Ah,19,	5900,	8205,5,		7300,2,		7063,350,	7451,2,		10; // Divine Guard Hat
	callsub S_Ah,20,	18564,	7165,10,	975,80,		5116,2,		8205,25,	15; // Fragment of Love
	callsub S_Ah,21,	18563,	7165,15,	975,75,		18564,1,	8205,20,	13; // Heart Wing Airband
	callsub S_Ah,22,	5907,	1023,350,	720,70,		7562,10,	7109,5,		10; // Sea Captain Hat
	callsub S_Ah,23,	5592,	7507,30,	4001,1,		7023,3,		2318,1,		3; // Sirgnum's Wings
	callsub S_Ah,24,	5898,	6558,450,	7109,3,		8205,25,	1030,20,	20; // Autumn Hairband
	callsub S_Ah,25,	18541,	7063,150,	907,90,		1030,5,		1745,1,		7; // Little Feather Hat
	callsub S_Ah,26,	18794,	7109,3,		7165,8,		983,65,		8205,25,	10; // Plain Black Mage Hat
	callsub S_Ah,27,	18652,	6326,5,		522,350,	5208,1,	 	8205,30,	8; // Vanargand Helm
	callsub S_Ah,28,	5897,	619,10,		4001,1,		5119,1,		610,30,		1; // Ascendant Crown
	callsub S_Ah,29,	19022,	12040,20,	12815,100,	975,20,		507,200,	10; // Floating Stone of Sage
	callsub S_Ah,30,	5564,	969,35,		7228,30,	8574,7,		7451,5,		1; // Crown of Deceit
	callsub S_Ah,31,	18539,	8576,6,		7038,100,	7215,50,	8205,15,	6; // Skull Cap
	callsub S_Ah,32,	18754,	7006,600,	25262,15,	8570,9,		7266,150,	10; // Blood Sucker
	callsub S_Ah,33,	18666,  8572,7	,	8571,9,		25731,5,	691,45,		5; // CD in Mouth
	callsub S_Ah,34,	5978,	7006,300,	7036,15,	8575,12,	25622,15,	10; // Toy Syringe
	callsub S_Ah,35,	5918,	25729,8,	8570,15,	8201,45,	4334,1,		10; // Gambler Seal
	callsub S_Ah,36,	19306,	8572,12,	8570,7,		8201,30,	4348,1,		10; // Heart Card in Mouth
	callsub S_Ah,37,	5451,	969,35,		7228,20,	25731,10,	7451,10,	10; // Golden Dragon Helm
	callsub S_Ah,38,	19138,	25729,7,	25731,7,	8573,9,		7095,70,	10; // Seraphim
	callsub S_Ah,39,	18550,	25731,1,	7063,50,	969,1,		7448,75,	5;	// Asgard Blessing
	callsub S_Ah,40,	19086,	5104,1,		1659,1,		25731,5,	25266,100,	5;	// Robot Blindfoold [1]
	callsub S_Ah,41,	18795,	7063,300,	7101,250,	25729,2,	8573,9,		10;	// Night Sparrow Hat
	callsub S_Ah,42,	5464,	7166,350,	7169,10,	7165,15,	4373,1,		10;	// Zaha Doll Hat
	callsub S_Ah,43,	18793,	23228,300,	7211,12,	4912,1,		4416,3,		10;	// Magician's Night Cap
	callsub S_Ah,44,    5901,	7166,75,    7113,15,    7114,25,	4915,1,  	10; // Focus Beret
	callsub S_Ah,45,    18791,	4921,1,		7510,30,    27286,3,	25622,9,	10; // Shrine Maiden Hat
	callsub S_Ah,46,    5899,	7030,600,	4918,1,		25729,3,	7109,10,	10; // Black Ribbon
	callsub S_Ah,47,	5906,	25731,5,	5072,1,		4909,1,		6608,250,	10;	// Oni Horns
	callsub S_Ah,48,	18934,	25731,3,	25375,15,	4924,1,		27286,3,	10;	// Fox Ears Bell Ribbon
	// Añade los objetos de las arrays.
	for($@i = 0; $@i < getarraysize(.hat); $@i++)
		npcshopadditem "HAT_MAKER_SHOP",.hat[$@i],1;
	end;

// Función para añadir hats a arrays.
S_Ah:
	setarray .hat[getarg(0)],getarg(1);
	setarray .m1[getarg(0)],getarg(2);
	setarray .m1c[getarg(0)],getarg(3);
	setarray .m2[getarg(0)],getarg(4);
	setarray .m2c[getarg(0)],getarg(5);
	setarray .m3[getarg(0)],getarg(6);
	setarray .m3c[getarg(0)],getarg(7);
	setarray .m4[getarg(0)],getarg(8);
	setarray .m4c[getarg(0)],getarg(9);
	setarray .zeny[getarg(0)],getarg(10)*1000000;
	return;
}
